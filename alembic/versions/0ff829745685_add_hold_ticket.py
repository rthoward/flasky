"""Add holds, tickets

Revision ID: 0ff829745685
Revises: ba541be05848
Create Date: 2019-06-01 22:33:06.225437

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "0ff829745685"
down_revision = "ba541be05848"
branch_labels = None
depends_on = None


def upgrade():
    connection = op.get_bind()
    connection.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp"')

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "holds",
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column("ends_at", sa.TIMESTAMP(), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("event_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["event_id"], ["events.id"], name=op.f("fk_holds_event_id_events")
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_holds_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_holds")),
        sa.UniqueConstraint("user_id", "event_id", name=op.f("uq_holds_user_id")),
    )
    op.create_index(op.f("ix_holds_ends_at"), "holds", ["ends_at"], unique=False)
    op.create_index(op.f("ix_holds_event_id"), "holds", ["event_id"], unique=False)
    op.create_table(
        "tickets",
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "access_code",
            postgresql.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("event_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["event_id"], ["events.id"], name=op.f("fk_tickets_event_id_events")
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_tickets_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_tickets")),
        sa.UniqueConstraint("access_code", name=op.f("uq_tickets_access_code")),
    )
    op.create_index(
        op.f("ix_tickets_access_code"), "tickets", ["access_code"], unique=False
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_tickets_access_code"), table_name="tickets")
    op.drop_table("tickets")
    op.drop_index(op.f("ix_holds_event_id"), table_name="holds")
    op.drop_index(op.f("ix_holds_ends_at"), table_name="holds")
    op.drop_table("holds")
    # ### end Alembic commands ###

    connection = op.get_bind()
    connection.execute('DROP EXTENSION IF EXISTS "uuid-ossp"')
